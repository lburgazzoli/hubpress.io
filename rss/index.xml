<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[.: lb :.]]></title><description><![CDATA[.: lb :.]]></description><link>https://lburgazzoli.github.io</link><image><url>/images/cover.jpg</url><title>.: lb :.</title><link>https://lburgazzoli.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Thu, 27 Oct 2016 10:29:07 GMT</lastBuildDate><atom:link href="https://lburgazzoli.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[from("java7:anonymousClasses").to("java8:lambda")]]></title><description><![CDATA[<div class="paragraph">
<p>With Camel 2.18 we have introduced a few functional APIs in RouteBuilder so you can leverage lambdas to easily build your routes.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
this is just the beginning so you should expect more and better functional APIs in the coming versions.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Let&#8217;s start writing a simple and intentionally verbose Java 7 route that logs if a number is even or odd.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("timer:simple?period=503")
    .setBody(exchangeProperty(Exchange.TIMER_FIRED_TIME))
    .transform(new ExpressionAdapter() {
        @Override
        public Object evaluate(Exchange exchange) {
            return exchange.getIn().getBody(Date.class).getTime();
        }
    })
    .choice()
        .when(new Predicate() {
                @Override
                public boolean matches(Exchange exchange) {
                    long number = exchange.getIn().getBody(Long.class);
                    return (number &amp; 1) == 0;
                }
            })
            .to("Received even number")
        .when(new Predicate() {
                @Override
                public boolean matches(Exchange exchange) {
                    long number = exchange.getIn().getBody(Long.class);
                    return (number &amp; 1) != 0;
                }
            })
            .to("Received odd number")
    .endChoice();</code></pre>
</div>
</div>
<div class="paragraph">
<p>&#160;<br>
You can now switch to Java 8 and start using new constructs to implement EIP:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://camel.apache.org/message-translator.html">Message Translator</a></p>
<div class="paragraph">
<p>You have a number of options to translate messages and among them you may think to use an <a href="http://camel.apache.org/expression.html">Expression</a> but unfortunately you can&#8217;t use a lambda to implement such interface as this interface is generic so you may think to use a method reference but that is not really an improvement over using a bean.</p>
</div>
<div class="paragraph">
<p>Here is where Camel 2.18 can help so you can implement the patter as below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">    .transform()
        .body(Date.class, Date::getTime)</code></pre>
</div>
</div>
</li>
<li>
<p><a href="http://camel.apache.org/content-based-router.html">Content Based Router</a></p>
<div class="paragraph">
<p>A <a href="http://camel.apache.org/predicate.html">Predicate</a> can be easily implemented using lambda, like:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">    .when(e -&gt; (exchange.getIn().getBody(Integer.class) &amp; 1) != 0)
        .to("Received odd number")</code></pre>
</div>
</div>
<div class="paragraph">
<p>However in Camel 2.18 we can make it even easier</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">    .when()
        .body(Long.class, b -&gt; (b &amp; 1) == 0)
        .to("Received odd number")</code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>&#160;<br>
We are now ready to apply the new APIs to out route and rewrite it as follow:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("timer:simple?period=503")
    .setBody(exchangeProperty(Exchange.TIMER_FIRED_TIME))
    .transform()
        .body(Date.class, Date::getTime)
    .choice()
        .when()
            .body(Long.class, b -&gt; (b &amp; 1) == 0)
            .log("Received even number ${body}")
        .when()
            .body(Long.class, b -&gt; (b &amp; 1) != 0)
            .log("Received odd number ${body}")
    .endChoice();</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
The new Java 8 APIs introduced in RouteBuilder helps to reduce the amount of code but also it helps to make it clear which is the target of a Predicate/Processor/Expression,  i.e. in the example above you can easily spot that the routing is based on the content of the body.
</td>
</tr>
</table>
</div>]]></description><link>https://lburgazzoli.github.io/2016/10/27/fromjava7anonymous-Classestojava8lambda.html</link><guid isPermaLink="true">https://lburgazzoli.github.io/2016/10/27/fromjava7anonymous-Classestojava8lambda.html</guid><category><![CDATA[camel]]></category><category><![CDATA[ java8]]></category><dc:creator><![CDATA[Luca Burgazzoli]]></dc:creator><pubDate>Thu, 27 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[def Âµsvc = Fabric8.apply(karaf).andThen(camel)]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://fabric8.io">Fabric8</a> is an amazing microservice platform which not only provide all the building blocks needed to effectively impement microservices but also a number of high quality open-source libraries and tools that every developer could leverage to ease the integration with Kubernetes/OpenShift.</p>
</div>
<div class="paragraph">
<p>Some of the bits fabric8 provides are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/fabric8io/kubernetes-client">OpenShift/Kubernetes Client</a></p>
</li>
<li>
<p><a href="https://github.com/fabric8io/spring-cloud-kubernetes">Spring Cloud Kubernetes</a></p>
</li>
<li>
<p><a href="https://github.com/fabric8io/fabric8/tree/master/components/fabric8-karaf">Fabric8 Karaf</a></p>
</li>
<li>
<p><a href="https://maven.fabric8.io">Fabric8 Maven Plugin</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>As we are brave, we won&#8217;t talk about doing Microservices with Spring Boot but we&#8217;ll go with <a href="http://karaf.apache.org/">Apache Karaf</a> and <a href="http://camel.apache.org/">Apache Camel</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
I&#8217;ll show the relevant parts here, full code is available on <a href="https://github.com/lburgazzoli/camel-karaf-microservice">github</a>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_set_up">Set-up</h3>
<div class="paragraph">
<p>In a traditional environment you often deploy bundles on a running Karaf container but that&#8217;s not the way we want to deploy in a microservice environment. Instead we want standalone applications so the first step is to create custom Karaf distribution pre-configured with the needed bundles.</p>
</div>
<div class="paragraph">
<p>This can be done via karaf-maven-plugin:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.karaf.tooling&lt;/groupId&gt;
    &lt;artifactId&gt;karaf-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${karaf.version}&lt;/version&gt;
    &lt;extensions&gt;true&lt;/extensions&gt;
    &lt;executions&gt; <i class="conum" data-value="1"></i><b>(1)</b>
      &lt;execution&gt;
        &lt;id&gt;karaf-assembly&lt;/id&gt;
        &lt;goals&gt;
          &lt;goal&gt;assembly&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;phase&gt;install&lt;/phase&gt;
      &lt;/execution&gt;
      &lt;execution&gt;
        &lt;id&gt;karaf-archive&lt;/id&gt;
        &lt;goals&gt;
          &lt;goal&gt;archive&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;phase&gt;install&lt;/phase&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
    &lt;configuration&gt;
      &lt;javase&gt;1.8&lt;/javase&gt;
      &lt;archiveTarGz&gt;true&lt;/archiveTarGz&gt;
      &lt;startupFeatures&gt; <i class="conum" data-value="2"></i><b>(2)</b>
        &lt;!-- karaf --&gt;
        &lt;feature&gt;framework&lt;/feature&gt;
        &lt;feature&gt;scr&lt;/feature&gt;
        &lt;feature&gt;aries-blueprint&lt;/feature&gt;

        &lt;!-- fabric8 --&gt;
        &lt;feature&gt;fabric8-karaf-blueprint&lt;/feature&gt;
        &lt;feature&gt;fabric8-karaf-cm&lt;/feature&gt;

        &lt;!-- camel --&gt;
        &lt;feature&gt;camel-core&lt;/feature&gt;
        &lt;feature&gt;camel-blueprint&lt;/feature&gt;
      &lt;/startupFeatures&gt;
      &lt;startupBundles&gt; <i class="conum" data-value="3"></i><b>(3)</b>
        &lt;bundle&gt;mvn:${project.groupId}/${project.artifactId}/${project.version};start-level=80&lt;/bundle&gt;
      &lt;/startupBundles&gt;
    &lt;/configuration&gt;
    ...
&lt;/plugin&gt;</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Map karaf-maven-plugin&#8217;s karaf-assembly and archive phases to install phase, this is mandatory if you want your project to be included in the distribution.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>List of features to start at boot</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>List of bundles to start at boot</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>We are now ready to start writing our microservice so let&#8217;s have a look on how to leverage Fabric8 Karaf:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>With <strong>fabric8-karaf-blueprint</strong> installed you can access ConfigMap and Secrets using property placeholders so if you have a ConfigMap like the one below</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-yaml" data-lang="yaml">kind: ConfigMap
apiVersion: v1
metadata:
  name: camel-karaf-global
data:
  data.center.name: "dc1"</code></pre>
</div>
</div>
<div class="paragraph">
<p>you can use the notation <code>k8s:map:mapName/dataKey</code> to retrieve the vaue of the field data.center.name, i.e:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;bean id="myBean" class="com.github.lburgazzoli.microservice.MyBean"&gt;
  &lt;argument value="$[k8s:map:camel-karaf-global/data.center.name]"/&gt;
  ...
&lt;/bean&gt;</code></pre>
</div>
</div>
</li>
<li>
<p>With <strong>fabric8-karaf-cm</strong> installed you can feed ConfigAdmin with values from ConfigMaps so if you have a ConfigMap as below</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-yaml" data-lang="yaml">kind: ConfigMap
apiVersion: v1
metadata:
  name: camel-karaf-microservice
  labels:
    karaf.pid: camel.karaf.microservice
data:
  bean.body: "Hello from OpenShift"</code></pre>
</div>
</div>
<div class="paragraph">
<p>then the service with pid camel.karaf.microservice will be able to retrieve the value of the property bean.body as if the value would have been provided in <code>etc/camel.karaf.microservice.cfg</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;bean id="myBean" class="com.github.lburgazzoli.microservice.MyBean"&gt;
  ..
  &lt;argument value="${bean.body}"/&gt;
&lt;/bean&gt;</code></pre>
</div>
</div>
</li>
<li>
<p>With fabric8-karaf-cm installed you can "hot reconfigure" your application by updating a ConfigMap</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>So let&#8217;s put all togheter to implement a simple Camel route using OSGI Blueprint:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;?xml version="1.0"?&gt;
&lt;blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
  xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.3.0"
  xsi:schemaLocation="
    http://www.osgi.org/xmlns/blueprint/v1.0.0
    https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
    http://camel.apache.org/schema/blueprint
    http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
    http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.3.0
    http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.3.xsd"&gt;

  &lt;cm:property-placeholder
      persistent-id="camel.karaf.microservice" <i class="conum" data-value="1"></i><b>(1)</b>
      update-strategy="reload"&gt; <i class="conum" data-value="2"></i><b>(2)</b>
    &lt;cm:default-properties&gt;
    &lt;/cm:default-properties&gt;
  &lt;/cm:property-placeholder&gt;

  &lt;ext:property-placeholder
    evaluator="fabric8" <i class="conum" data-value="3"></i><b>(3)</b>
    placeholder-prefix="$[" placeholder-suffix="]"/&gt;

  &lt;bean id="myBean" class="com.github.lburgazzoli.microservice.MyBean"&gt;
    &lt;argument value="$[k8s:map:camel-karaf-global/data.center.name]"/&gt;
    &lt;argument value="${bean.body}"/&gt;
  &lt;/bean&gt;

  &lt;camelContext id="camel-context" xmlns="http://camel.apache.org/schema/blueprint"&gt;

    &lt;route id="timer"&gt;
      &lt;from uri="timer:foo?period=10s"/&gt;
      &lt;setHeader headerName="DataCenter"&gt;
          &lt;method ref="myBean" method="dataCenter"/&gt;
      &lt;/setHeader&gt;
      &lt;setBody&gt;
          &lt;method ref="myBean" method="body"/&gt;
      &lt;/setBody&gt;
      &lt;log message="Body is: ${body}, DataCenter is: ${header.DataCenter}"/&gt;
    &lt;/route&gt;

  &lt;/camelContext&gt;

&lt;/blueprint&gt;</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Set the persistent-id for the Blueprint.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Configure reload strategy of the context so if a property changes in ConfigAdmin (i.e. by changing the related ConfigMap) the context will be reloaded.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Configure fabric8 PropertyEvaluator so that you can use Fabric8&#8217;s functions to resolve placeholders.</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Check the <a href="http://fabric8.io/guide/karaf.html">Fabric8 Karaf documentation</a> for details and options.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_running_the_example">Running the example</h3>
<div class="paragraph">
<p>You need a running OpenShift or Kubenretes cluster to run the example, if you do not have one I suggest to use <a href="https://github.com/kubernetes/minikube">Minikube</a> or <a href="https://github.com/jimmidyson/minishift">Minishift</a> to set up an environment in a few simple steps even <a href="http://www.davsclaus.com/2016/10/installing-kubernetes-from-copenhagen.html">while having a drink at the Airport</a></p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
If you deploy on OpenShift you need to grant view role to the service account <code>oc policy add-role-to-user view system:serviceaccount:$(oc project -q):default -n $(oc project -q)</code>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>To run the application run the following command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>./mvnw clean fabric8:run</code></pre>
</div>
</div>
<div class="paragraph">
<p>This command will build the application, generate OpenShift/Kubernetes resources then deploy and run the application to the cluster and finally tail the pod log so you can see what the application is doing.</p>
</div>
<div class="paragraph">
<p>After the initialization the log should looks like:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>[INFO] F8: 2016-10-24 15:48:14,717 | INFO  | FelixStartLevel  | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) started in 0.284 seconds
[INFO] F8: 2016-10-24 15:48:15,728 | INFO  | #0 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from OpenShift, DataCenter is: dc1
[INFO] F8: 2016-10-24 15:48:25,736 | INFO  | #0 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from OpenShift, DataCenter is: dc1
[INFO] F8: 2016-10-24 15:48:35,718 | INFO  | #0 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from OpenShift, DataCenter is: dc1</pre>
</div>
</div>
<div class="paragraph">
<p>Now if we update the ConfigMap named <code>camel-karaf-microservice</code> with a message like <code>Hello from Minishift</code> we should see the context to be restarted and the new message being displayed like below:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>[INFO] F8: 2016-10-24 15:50:01,214 | INFO  | Thread-9         | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) is shutting down
[INFO] F8: 2016-10-24 15:50:01,216 | INFO  | Thread-9         | DefaultShutdownStrategy          | 36 - org.apache.camel.camel-core - 2.18.0 | Starting to graceful shutdown 1 routes (timeout 300 seconds)
[INFO] F8: 2016-10-24 15:50:01,220 | INFO  | 1 - ShutdownTask | DefaultShutdownStrategy          | 36 - org.apache.camel.camel-core - 2.18.0 | Route: timer shutdown complete, was consuming from: timer://foo?period=10s
[INFO] F8: 2016-10-24 15:50:01,221 | INFO  | Thread-9         | DefaultShutdownStrategy          | 36 - org.apache.camel.camel-core - 2.18.0 | Graceful shutdown of 1 routes completed in 0 seconds
[INFO] F8: 2016-10-24 15:50:01,249 | INFO  | Thread-9         | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) uptime 1 minute
[INFO] F8: 2016-10-24 15:50:01,250 | INFO  | Thread-9         | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) is shutdown in 0.035 seconds
[INFO] F8: 2016-10-24 15:50:01,330 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) is starting
[INFO] F8: 2016-10-24 15:50:01,330 | INFO  | rint Extender: 1 | ManagedManagementStrategy        | 36 - org.apache.camel.camel-core - 2.18.0 | JMX is enabled
[INFO] F8: 2016-10-24 15:50:01,364 | INFO  | rint Extender: 1 | DefaultRuntimeEndpointRegistry   | 36 - org.apache.camel.camel-core - 2.18.0 | Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[INFO] F8: 2016-10-24 15:50:01,396 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[INFO] F8: 2016-10-24 15:50:01,417 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Route: timer started and consuming from: timer://foo?period=10s
[INFO] F8: 2016-10-24 15:50:01,418 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Total 1 routes, of which 1 are started.
[INFO] F8: 2016-10-24 15:50:01,418 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) started in 0.087 seconds
[INFO] F8: 2016-10-24 15:50:02,419 | INFO  | #2 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from Minishift, DataCenter is: dc1
[INFO] F8: 2016-10-24 15:50:12,418 | INFO  | #2 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from Minishift, DataCenter is: dc1
[INFO] F8: 2016-10-24 15:50:22,419 | INFO  | #2 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from Minishift, DataCenter is: dc1</pre>
</div>
</div>
</div>]]></description><link>https://lburgazzoli.github.io/2016/10/24/def-svc-Fabric8applykarafand-Thencamel.html</link><guid isPermaLink="true">https://lburgazzoli.github.io/2016/10/24/def-svc-Fabric8applykarafand-Thencamel.html</guid><category><![CDATA[microservices]]></category><category><![CDATA[ fabric8]]></category><category><![CDATA[ karaf]]></category><category><![CDATA[ openshift]]></category><category><![CDATA[ kubernetes]]></category><dc:creator><![CDATA[Luca Burgazzoli]]></dc:creator><pubDate>Mon, 24 Oct 2016 00:00:00 GMT</pubDate></item></channel></rss>