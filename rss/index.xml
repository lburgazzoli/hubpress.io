<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[.: lb :.]]></title><description><![CDATA[.: lb :.]]></description><link>https://lburgazzoli.github.io</link><image><url>/images/cover-2.jpg</url><title>.: lb :.</title><link>https://lburgazzoli.github.io</link></image><generator>RSS for Node</generator><lastBuildDate>Wed, 12 Apr 2017 17:18:33 GMT</lastBuildDate><atom:link href="https://lburgazzoli.github.io/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[A camel running in the clouds (part 2)]]></title><description><![CDATA[<div class="sect2">
<h3 id="_meet_camel_s_servicecall_eip">Meet Camel&#8217;s ServiceCall EIP</h3>
<div class="paragraph">
<p>The ServiceCall EIP has been introduced in Camel 2.18.0 to allows calling remote services in a distributed systems looking up informaton about the service to consume from external systems such as Kubernetes, Consul, Etcd or DNS. The ServiceCall EIP has been enhanced in Camel 2.19 to make it more extensible and easier to use.</p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
This post is based on Camel 2.19 which should be released shortly.
</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="_servicecall_concepts">ServiceCall Concepts</h4>
<div class="paragraph">
<p>The ServiceCall is based on common cloud-concepts:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>service discovery</strong> to collect services definitions from external systems/registries.</p>
</li>
<li>
<p><strong>service filter</strong> to filter out services definitions.</p>
</li>
<li>
<p><strong>service chooser</strong> to choose the most appropriate service to call.</p>
</li>
<li>
<p><strong>load balancer</strong> glue for above concepts.</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_servicecall_in_action">ServiceCall in Action</h4>
<div class="paragraph">
<p>The ServiceCall EIP has been implemented to require minimal configuration but let&#8217;s start with a verbose example:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">public MyRouteBuilder extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from("timer:service-call?period=1s")
            .serviceCall()
                .name("myService") <i class="conum" data-value="1"></i><b>(1)</b>
                .staticServiceDiscovery() <i class="conum" data-value="2"></i><b>(2)</b>
                    .server("myService@host1.com:443")
                    .server("myService@host2.com:80")
                    .server("myService@host3.com:443")
                    .server("anotherService@host4.com:443")
                .end()
                .serviceFilter( <i class="conum" data-value="3"></i><b>(3)</b>
                    list -&gt; list.stream().filter(s -&gt; s.getPort() == 443).collect(Collectors.toList())
                ).serviceChooser( <i class="conum" data-value="4"></i><b>(4)</b>
                    list -&gt; list.get(0)
                )
            .end();
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Name the service you want to consume</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>The service discovery</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>The service filter</td>
</tr>
<tr>
<td><i class="conum" data-value="4"></i><b>4</b></td>
<td>The service chooser</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>When the timer fires, the load balancer created by the Service Call EIP leverages the provided service discovery implementation to query a thirth party system about the service named <code>myService</code> then it eventually filter out services not matching a given criteria through the provided service filter (in this case only services listening on port 443 are taken into account), then it chooses the service to use thanks to the given service chooser implementation and finally it invokes the service using the configured component (camel-http4 is the default).</p>
</div>
<div class="paragraph">
<p>With the example above, the final uri will be:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>    http4:host1.com:443</code></pre>
</div>
</div>
<div class="paragraph">
<p>You often need to create a more complex camel uri and the Service Call EIP provides a number of options to achieve such goal:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>The <strong>service name</strong> supports a limited uri like syntax, here some examples</p>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 25%;">
<col style="width: 75%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Resolution</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>myService</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>http4://host:port</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>myService/path</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>http4://host:port/path</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>myService/path?foo=bar</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>http4://host:port/path?foo=bar</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("timer:service-call")
    .serviceCall()
        .name("myService/hello");</code></pre>
</div>
</div>
</li>
<li>
<p>If you wan to have more control over the uri construction, you can use the <strong>uri</strong> directive:</p>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 25%;">
<col style="width: 40%;">
<col style="width: 35%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">URI</th>
<th class="tableblock halign-left valign-top">Resolution</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>myService</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>undertow:http://myService/hellp</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>undertow:http://host:port/hello</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>myService</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>undertow:http://myService.host:myService.port/hello</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>undertow:http://host:port/hello</p>
</div></div></td>
</tr>
</tbody>
</table>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("timer:service-call")
    .serviceCall()
        .name("myService")
        .uri("undertow:http://myService/hello");</code></pre>
</div>
</div>
</li>
<li>
<p>Advanced users can have full control over the uri construction through expressions:</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("timer:service-call")
    .serviceCall()
        .name("myService")
        .expression()
            .simple("undertow:http://${header.CamelServiceCallServiceHost}:${header.CamelServiceCallServicePort}/hello");</code></pre>
</div>
</div>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_servicecall_configuration">ServiceCall Configuration</h4>
<div class="paragraph">
<p>For simple services configuring a service call straight on the route is fine but if you need to leverage the ServiceCall on multiple routes you may want to have shared configurations.</p>
</div>
<div class="paragraph">
<p>This can be achieved adding one or more ServiceCallConfigurationDefinition to the camel context or registry:</p>
</div>
<div class="listingblock">
<div class="title">Example</div>
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">StaticServiceDiscovery discovery = new StaticServiceDiscovery();
discovery.addServer("myService@host1.com:443");
discovery.addServer("myService@host2.com:80");
discovery.addServer("myService@host3.com:443");
discovery.addServer("anotherService@host4.com:443");
discovery.addServer("anotherService@host5.com:8443");

ServiceCallConfigurationDefinition globalConf = new ServiceCallConfigurationDefinition();
globalConf.setServiceDiscovery(discovery);
globalConf.setServiceChooser(list -&gt; list.get(ThreadLocalRandom.current().nextInt(list.size())));

ServiceCallConfigurationDefinition httpsConf = new ServiceCallConfigurationDefinition();
httpsConf.setServiceFilter(list -&gt; list.stream().filter(s -&gt; s.getPort() == 443).collect(toList()))

getContext().setServiceCallConfiguration(globalConf); <i class="conum" data-value="1"></i><b>(1)</b>
getContext().addServiceCallConfiguration("https", httpsConf); <i class="conum" data-value="2"></i><b>(2)</b></code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Set the default ServiceCall configuration</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Add a specific configuration named "https"</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>From now on, the globla configuration is used to provide the defaults for all the service call definitions and additional named configuration, let&#8217;s see how this impacts our routes definition:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("timer:service-call-1")
    .serviceCall()
        .name("myService")
        .serviceCallConfiguration("https") <i class="conum" data-value="1"></i><b>(1)</b>
        .serviceChooser(list -&gt; list.get(0)); <i class="conum" data-value="2"></i><b>(2)</b>

from("timer:service-call-2")
    .serviceCall()
        .name("anotherService");</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Set the service call configuration used as template</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Override the service chooser provided by the template</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>What&#8217;s happen unde the hoods is:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>Both the service call have access to the same service list thanks to the globa configuration</p>
</li>
<li>
<p>The first service call will be able to consume only services on port 443 as it hinerits from the configuration named <code>https</code></p>
</li>
<li>
<p>The first service call will always use the first server retrieved by the service discovery (yes, in this dummy example it will always be the same)</p>
</li>
<li>
<p>The second service call inherits its whole configuration from the default one</p>
</li>
</ul>
</div>
</div>
<div class="sect3">
<h4 id="_spring_boot_support">Spring Boot support</h4>
<div class="paragraph">
<p>The Service Call EIP plays very well with Spring Boot and you can configure most of the options from the <code>application.properties</code> so let&#8217;s write an example of a micro service that should get the list of available services from a <code>consul</code> registry and using a <code>ribbon</code> load balancer:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><strong>Dependencies:</strong></p>
<div class="ulist">
<ul>
<li>
<p>camel-spring-boot-starter</p>
</li>
<li>
<p>camel-consul-starter</p>
</li>
<li>
<p>camel-ribbon-starter</p>
</li>
</ul>
</div>
</li>
<li>
<p><strong>Application configuration:</strong></p>
<div class="listingblock">
<div class="title">application.properties</div>
<div class="content">
<pre class="highlight"><code class="language-properties" data-lang="properties"># this can be configured stright tot he route and it has been included to show
# property placeholders support
service.name = myService

# this property is not mandatory and it has been included to show how to configure
# the service discovery implementation provided by camel-consul
camel.cloud.consul.service-discovery.url = http://localhost:8500</code></pre>
</div>
</div>
</li>
<li>
<p><strong>Routes:</strong></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@Component
public class MyRouteBuilder implements RouteBuilder {
    @Override
    public void configure() throws Exception {
        from("direct:service-call")
            .serviceCall("{{service.name}}");
    }
}</code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>That&#8217;s all!</p>
</div>
<div class="paragraph">
<p>Under the hood the camel starter perform auto configuration of the underlying services such as:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>A LoadBalancer based on NetflixOSS Ribbon</p>
</li>
<li>
<p>A ServiceDiscovery based on HashiCorp Consul</p>
</li>
<li>
<p>A ServiceFilter based on Consul&#8217;s service health</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>If needed you can add additional Service Discovery to the mix and under the hood camel will bridge them i.e. you can add a static list of services to the mix with a simple configuration like:</p>
</div>
<div class="listingblock">
<div class="title">application.properties</div>
<div class="content">
<pre class="highlight"><code class="language-properties" data-lang="properties">camel.cloud.service-discovery.services[myService] = host1:8080,host2:8080,host3:8080</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
You can use Spring Cloud and Spring Cloud Netflix instead of Camel&#8217;s own consul/ribbon implementation by using camel-spring-cloud-starter and camel-spring-cloud-netflix-starter.
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_ready_to_use_implementations">Ready to use Implementations</h4>
<div class="paragraph">
<p>Camel provides some implementations of the conceept we have introduced sat the biginning of the post out of the box:</p>
</div>
<table class="tableblock frame-all grid-all spread">
<colgroup>
<col style="width: 30%;">
<col style="width: 50%;">
<col style="width: 20%;">
</colgroup>
<thead>
<tr>
<th class="tableblock halign-left valign-top">Type</th>
<th class="tableblock halign-left valign-top">Name</th>
<th class="tableblock halign-left valign-top">Artifact</th>
</tr>
</thead>
<tbody>
<tr>
<td class="tableblock halign-left valign-middle" rowspan="6"><div><div class="paragraph">
<p><strong>Service Discovery</strong></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Static service discovery</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-core</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Chained service discovery</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-core</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Consul based service discovery</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-consul</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>DNS SRV based service discovery</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-dns</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Etcd based service discovery</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-etcd</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Kubernetes based service discovery</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-kubernetes</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-middle" rowspan="4"><div><div class="paragraph">
<p><strong>Service Filter</strong></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Healty filter</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-core</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Pass through filter</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-root</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Blacklist service filter</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-core</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Chained service filter</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-core</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-middle" rowspan="2"><div><div class="paragraph">
<p><strong>Service Chooser</strong></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Round robin chooser</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-core</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Random chooser</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-core</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-middle" rowspan="2"><div><div class="paragraph">
<p><strong>Load Balancer</strong></p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>Default load balancer</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-core</p>
</div></div></td>
</tr>
<tr>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>SpringCloud load-balancer</p>
</div></div></td>
<td class="tableblock halign-left valign-top"><div><div class="paragraph">
<p>camel-spring-cloud</p>
</div></div></td>
</tr>
</tbody>
</table>
</div>
</div>]]></description><link>https://lburgazzoli.github.io/2017/04/12/A-camel-running-in-the-clouds-part-2.html</link><guid isPermaLink="true">https://lburgazzoli.github.io/2017/04/12/A-camel-running-in-the-clouds-part-2.html</guid><category><![CDATA[camel]]></category><category><![CDATA[cloud]]></category><category><![CDATA[microservices]]></category><dc:creator><![CDATA[Luca Burgazzoli]]></dc:creator><pubDate>Wed, 12 Apr 2017 00:00:00 GMT</pubDate></item><item><title><![CDATA[A camel running in the clouds]]></title><description><![CDATA[<div class="sect2">
<h3 id="_camel_and_spring_boot">Camel and Spring Boot</h3>
<div class="paragraph">
<p>Camel supports Spring Boot since Camel 2.15 but in the latest release we have improved Camel to make it a first class citizen of Spring Boot, some notables improvements available as of Camel 2.18 are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>spring boot starters</p>
</li>
<li>
<p>spring boot auto configuration</p>
</li>
<li>
<p>spring boot healt check</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>In Camel 2.19 we&#8217;ll furter improve the integration between Camel and Spring Boot and it will include support for Spring Cloud.</p>
</div>
</div>
<div class="sect2">
<h3 id="_meet_camel_spring_cloud">Meet Camel Spring Cloud</h3>
<div class="paragraph">
<p>Spring Cloud <sup class="footnote">[<a id="_footnoteref_1" class="footnote" href="#_footnote_1" title="View footnote.">1</a>]</sup> provides an implementation of some common pattern in distributed system like:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>configuration management</p>
</li>
<li>
<p>service discovery</p>
</li>
<li>
<p>load balancing</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>The initial support for Spring Cloud in Camel leverages service discovery and load balancing to provide an implementation of the ServiceCall EIP <sup class="footnote">[<a id="_footnoteref_2" class="footnote" href="#_footnote_2" title="View footnote.">2</a>]</sup> so that you can easilly call remote services with minimal efforts.</p>
</div>
<div class="paragraph">
<p>Let&#8217;s build a simple load balanced ServiceCall in OpenShift</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
I&#8217;ll show the relevant parts here, full code is available on <a href="https://github.com/lburgazzoli/camel-cloud">github</a>
</td>
</tr>
</table>
</div>
<div class="sect3">
<h4 id="_bill_of_materials">Bill of materials</h4>
<div class="ulist">
<ul>
<li>
<p>Minishift <sup class="footnote">[<a id="_footnoteref_3" class="footnote" href="#_footnote_3" title="View footnote.">3</a>]</sup></p>
</li>
<li>
<p>Apache Maven</p>
</li>
<li>
<p>Fabri8 Maven Plugin <sup class="footnote">[<a id="_footnoteref_4" class="footnote" href="#_footnote_4" title="View footnote.">4</a>]</sup></p>
</li>
<li>
<p>Spring Boot</p>
</li>
<li>
<p>Spring Cloud Commons</p>
</li>
<li>
<p>Spring Cloud Netflix</p>
</li>
<li>
<p>Spring Cloud Kubernetes</p>
</li>
<li>
<p>Apache Camel 2.19.0-SNAPSHOT</p>
</li>
</ul>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
Spring Cloud Kubernetes is now part of Spring Cloud Incubator <sup class="footnote">[<a id="_footnoteref_5" class="footnote" href="#_footnote_5" title="View footnote.">5</a>]</sup> but we are still using the version from fabric8io <sup class="footnote">[<a id="_footnoteref_6" class="footnote" href="#_footnote_6" title="View footnote.">6</a>]</sup> to let the migration process to complete
</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_set_up_a_simple_rest_web_service">Set up a simple REST Web Service</h4>
<div class="paragraph">
<p>Thanks to Spring Boot, writing a simple REST Web Service is really trivial:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@RestController
public class ServiceController {
    @RequestMapping("/hello")
    public String hello() {
        return "Hello from " + System.getenv("POD_NAME");
    }
}</code></pre>
</div>
</div>
<div class="paragraph">
<p>Now, let&#8217;s write a OpenShift descriptor to start two replicas of the Web Service we have created:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-yaml" data-lang="yaml">spec:
  replicas: 2
  template:
    spec:
      containers:
        -
          env:
          - name: SPRING_APPLICATION_NAME
            value: camel-cloud-svc
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name</code></pre>
</div>
</div>
<div class="paragraph">
<p>Thanks to the Fabric8 Maven Plugin, deploying our Web Service is a matter of a single command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>$ mvn fabric8:deploy

...

$ oc get pods
NAME                          READY     STATUS      RESTARTS   AGE
camel-cloud-svc-1-deploy      1/1       Running     0          27s
camel-cloud-svc-1-ojyy6       0/1       Running     0          24s
camel-cloud-svc-1-sbkbi       0/1       Running     0          24s
camel-cloud-svc-s2i-2-build   0/1       Completed   0          55s</code></pre>
</div>
</div>
<div class="paragraph">
<p>If you looks at the endpoints you&#8217;ll see the internal addresses our Web Service is listening to and its name:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>$ oc get endpoints
NAME              ENDPOINTS                         AGE
camel-cloud-svc   172.17.0.3:8080,172.17.0.5:8080   2m</code></pre>
</div>
</div>
</div>
<div class="sect3">
<h4 id="_set_up_a_simple_camel_route">Set up a simple Camel Route</h4>
<div class="paragraph">
<p>Thanks to Spring Boot, Spring Cloud and Camel Spring Cloud writing a simple route that invokes the Web Services we have deployed above is really easy:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">@Configuration
public class ConsumerConfiguration {
    @Bean
    public RouteBuilder routeBuilder() {
        return new RouteBuilder() {
            @Override
            public void configure() throws Exception {
                from("timer:service-call?period=1s")
                    .serviceCall("camel-cloud-svc/hello") <i class="conum" data-value="1"></i><b>(1)</b>
                    .convertBodyTo(String.class)
                        .to("log:service.consumer?level=INFO&amp;showAll=tru&amp;multiline=true");
            }
        };
    }
}</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>The only thing you need to configure the Service Call EIP: the name of the service and its context path</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Thanks to the Fabric8 Maven Plugin, running our Web Service Consumer is a matter of a single command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>$ mvn fabric8:run

...

[INFO] F8: 2016-12-21 17:35:25.473  INFO 1 --- [://service-call] service.consumer : Exchange[
[INFO] F8: , ExchangePattern: InOnly
[INFO] F8: , BodyType: String
[INFO] F8: , Body: Hello from camel-cloud-svc-1-sbkbi <i class="conum" data-value="1"></i><b>(1)</b>
[INFO] F8: ]
[INFO] F8: 2016-12-21 17:35:25.563  INFO 1 --- [://service-call] service.consumer : Exchange[
[INFO] F8: , ExchangePattern: InOnly
[INFO] F8: , BodyType: String
[INFO] F8: , Body: Hello from camel-cloud-svc-1-ojyy6 <i class="conum" data-value="2"></i><b>(2)</b>
[INFO] F8: ]</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Web Service invoked on POD camel-cloud-svc-1-sbkbi</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Web Service invoked on POD camel-cloud-svc-1-ojyy6</td>
</tr>
</table>
</div>
</div>
<div class="sect3">
<h4 id="_wrap_up">Wrap up</h4>
<div class="paragraph">
<p>What&#8217;s happen under the hood ?</p>
</div>
<div class="olist arabic">
<ol class="arabic">
<li>
<p>Spring Cloud Kubernetes automatically creates a DiscoveryClient which is used to lookup services by name</p>
</li>
<li>
<p>Spring Cloud Commons/Netflix automatically creates a LoadBalancerClient which leverages Netflix&#8217;s Ribbon for load balancing</p>
</li>
<li>
<p>Camel Spring Cloud automatically configure the SerivceCall EIP to use the LoadBalancerClient created by Spring Cloud</p>
</li>
</ol>
</div>
<div class="admonitionblock warning">
<table>
<tr>
<td class="icon">
<i class="fa icon-warning" title="Warning"></i>
</td>
<td class="content">
This is a work in progress so things may change in the next future.
</td>
</tr>
</table>
</div>
</div>
</div>
<div id="footnotes">
<hr>
<div class="footnote" id="_footnote_1">
<a href="#_footnoteref_1">1</a>. <a href="http://projects.spring.io/spring-cloud/" class="bare">http://projects.spring.io/spring-cloud/</a>
</div>
<div class="footnote" id="_footnote_2">
<a href="#_footnoteref_2">2</a>. <a href="http://camel.apache.org/servicecall-eip.html" class="bare">http://camel.apache.org/servicecall-eip.html</a>
</div>
<div class="footnote" id="_footnote_3">
<a href="#_footnoteref_3">3</a>. <a href="https://github.com/minishift/minishift" class="bare">https://github.com/minishift/minishift</a>
</div>
<div class="footnote" id="_footnote_4">
<a href="#_footnoteref_4">4</a>. <a href="https://maven.fabric8.io/" class="bare">https://maven.fabric8.io/</a>
</div>
<div class="footnote" id="_footnote_5">
<a href="#_footnoteref_5">5</a>. <a href="https://github.com/spring-cloud-incubator/spring-cloud-kubernetes" class="bare">https://github.com/spring-cloud-incubator/spring-cloud-kubernetes</a>
</div>
<div class="footnote" id="_footnote_6">
<a href="#_footnoteref_6">6</a>. <a href="https://github.com/fabric8io/spring-cloud-kubernetes/" class="bare">https://github.com/fabric8io/spring-cloud-kubernetes/</a>
</div>
</div>]]></description><link>https://lburgazzoli.github.io/2016/12/21/A-camel-running-in-the-clouds.html</link><guid isPermaLink="true">https://lburgazzoli.github.io/2016/12/21/A-camel-running-in-the-clouds.html</guid><category><![CDATA[camel]]></category><category><![CDATA[ spring-boot]]></category><category><![CDATA[ spring-cloud]]></category><category><![CDATA[ microservices]]></category><dc:creator><![CDATA[Luca Burgazzoli]]></dc:creator><pubDate>Wed, 21 Dec 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[from("java7:anonymousClasses").to("java8:lambda")]]></title><description><![CDATA[<div class="paragraph">
<p>With Camel 2.18 we have introduced a few functional APIs in RouteBuilder so you can leverage lambdas to easily build your routes.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
this is just the beginning so you should expect more and better functional APIs in the coming versions.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>Let&#8217;s start writing a simple and intentionally verbose Java 7 route that logs if a number is even or odd.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("timer:simple?period=503")
    .setBody(exchangeProperty(Exchange.TIMER_FIRED_TIME))
    .transform(new ExpressionAdapter() {
        @Override
        public Object evaluate(Exchange exchange) {
            return exchange.getIn().getBody(Date.class).getTime();
        }
    })
    .choice()
        .when(new Predicate() {
                @Override
                public boolean matches(Exchange exchange) {
                    long number = exchange.getIn().getBody(Long.class);
                    return (number &amp; 1) == 0;
                }
            })
            .to("Received even number")
        .when(new Predicate() {
                @Override
                public boolean matches(Exchange exchange) {
                    long number = exchange.getIn().getBody(Long.class);
                    return (number &amp; 1) != 0;
                }
            })
            .to("Received odd number")
    .endChoice();</code></pre>
</div>
</div>
<div class="paragraph">
<p>You can now switch to Java 8 and start using new constructs to implement EIP:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="http://camel.apache.org/message-translator.html">Message Translator</a></p>
<div class="paragraph">
<p>You have a number of options to translate messages and among them you may think to use an <a href="http://camel.apache.org/expression.html">Expression</a> but unfortunately you can&#8217;t use a lambda to implement such interface as this interface is generic so you may think to use a method reference but that is not really an improvement over using a bean.</p>
</div>
<div class="paragraph">
<p>Here is where Camel 2.18 can help so you can implement the patter as below:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">    .transform()
        .body(Date.class, Date::getTime)</code></pre>
</div>
</div>
</li>
<li>
<p><a href="http://camel.apache.org/content-based-router.html">Content Based Router</a></p>
<div class="paragraph">
<p>A <a href="http://camel.apache.org/predicate.html">Predicate</a> can be easily implemented using lambda, like:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">    .when(exchange -&gt; (exchange.getIn().getBody(Integer.class) &amp; 1) != 0)
        .to("Received odd number")</code></pre>
</div>
</div>
<div class="paragraph">
<p>However in Camel 2.18 we can make it even easier</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">    .when()
        .body(Long.class, b -&gt; (b &amp; 1) == 0)
        .to("Received odd number")</code></pre>
</div>
</div>
</li>
</ul>
</div>
<div class="paragraph">
<p>We are now ready to apply the new APIs to our route and rewrite it as follow:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("timer:simple?period=503")
    .setBody(exchangeProperty(Exchange.TIMER_FIRED_TIME))
    .transform()
        .body(Date.class, Date::getTime)
    .choice()
        .when()
            .body(Long.class, b -&gt; (b &amp; 1) == 0)
            .log("Received even number ${body}")
        .when()
            .body(Long.class, b -&gt; (b &amp; 1) != 0)
            .log("Received odd number ${body}")
    .endChoice();</code></pre>
</div>
</div>
<div class="admonitionblock tip">
<table>
<tr>
<td class="icon">
<i class="fa icon-tip" title="Tip"></i>
</td>
<td class="content">
The new Java 8 APIs introduced in RouteBuilder helps to reduce the amount of code but it also helps to make it clear which is the target of a Predicate/Processor/Expression,  i.e. in the example above you can easily spot that the routing is based on the content of the body.
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>As Java 8 API refinement is ongoing here an updated list of EIP that have been enanced to be Java 8 friendly:</p>
</div>
<div class="dlist">
<dl>
<dt class="hdlist1">From <strong>Camel 2.18.1</strong></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><a href="http://camel.apache.org/aggregator2.html">Aggregator</a></p>
<div class="paragraph">
<p>you can implement your aggregation policy/aggregation strategy as lambda:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("direct:aggregate")
    .aggregate()
        .body(Long.class, b -&gt; (b &amp; 1) == 0)
        .strategy()
            .body(Long.class, (o, n) -&gt; o != null ? o + n : n)
        .completion()
            .body(Long.class, b -&gt; b &gt;= 10)
    .to("mock:result");</code></pre>
</div>
</div>
</li>
<li>
<p><a href="http://camel.apache.org/content-enricher.html">Content Enricher</a></p>
<div class="paragraph">
<p>You can enrich content using data from an external service and merge it with a lambda expression:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">fom("direct:start")
    .enrichWith("direct:resource")
        .body(String.class, (o, n) -&gt; n + o)
    .to("mock:enriched");</code></pre>
</div>
</div>
</li>
</ul>
</div>
</dd>
<dt class="hdlist1">From <strong>Camel 2.19</strong></dt>
<dd>
<div class="ulist">
<ul>
<li>
<p><a href="http://camel.apache.org/dynamic-router.html">Dynamic Router</a></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">class MyRouteBuilder extends RouteBuilder {
    @Override
    public void configure() throws Exception {
        from("direct:start-1")
            .dynamicRouter()
                .exchange(this::slip);
    }

    private String slip(Exchange exchange) {
        String previous = ExchangeHelper.getHeaderOrProperty(
            exchange,
            Exchange.SLIP_ENDPOINT,
            String.class);

        if (previous == null) {
            return "mock:a,mock:b";
        } else if ("mock://b".equals(previous)) {
            return "mock:c";
        }

        // no more so return null
        return null;
    }
}</code></pre>
</div>
</div>
</li>
<li>
<p><a href="http://camel.apache.org/idempotent-consumer.html">Idempotent Consumer</a></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("direct:start")
    .idempotentConsumer()
        .message(m -&gt; m.getHeader("MessageId"))
        .messageIdRepository(new MemoryIdempotentRepository())
    .to("mock:result")</code></pre>
</div>
</div>
</li>
<li>
<p><a href="http://camel.apache.org/loop.html">Loop</a></p>
<div class="paragraph">
<p>You can express the do/while end condition as lamda</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("direct:start")
    .loopDoWhile()
        .body(String.class, b -&gt; b.length() &lt;= 5)
        .transform()
            .body(String.class, b -&gt; b += "A")
        .to("mock:loop")
    .end()
    .to("mock:result");</code></pre>
</div>
</div>
</li>
<li>
<p><a href="http://camel.apache.org/multicast.html">Multicast</a></p>
<div class="paragraph">
<p>You can implement your custom onPrepare function using lambda as well as the aggregation strategy used to assemble the replies from the multicasts.</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("direct:start")
    .multicast()
        .onPrepare()
            .message(m -&gt; m.setHeader("onPrepare", true))
        .aggregationStrategy()
            .body(Integer.class, (o, n) -&gt; o != null ? o + n : n)
        .to("direct:do-something-1", "direct:do-something-2")
        .end()
    .to("mock:result");</code></pre>
</div>
</div>
</li>
<li>
<p><a href="http://camel.apache.org/routing-slip.html">Routing Slip</a></p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-java" data-lang="java">from("direct:start")
    .routingSlip()
        .message(m -&gt; m.getHeader("RecipientListHeader", String.class).split(","))
    .end();</code></pre>
</div>
</div>
</li>
</ul>
</div>
</dd>
</dl>
</div>]]></description><link>https://lburgazzoli.github.io/2016/10/27/fromjava7anonymous-Classestojava8lambda.html</link><guid isPermaLink="true">https://lburgazzoli.github.io/2016/10/27/fromjava7anonymous-Classestojava8lambda.html</guid><category><![CDATA[camel]]></category><category><![CDATA[ java8]]></category><dc:creator><![CDATA[Luca Burgazzoli]]></dc:creator><pubDate>Thu, 27 Oct 2016 00:00:00 GMT</pubDate></item><item><title><![CDATA[def µsvc = Fabric8.apply(karaf).andThen(camel)]]></title><description><![CDATA[<div id="preamble">
<div class="sectionbody">
<div class="paragraph">
<p><a href="https://fabric8.io">Fabric8</a> is an amazing microservice platform which not only provide all the building blocks needed to effectively impement microservices but also a number of high quality open-source libraries and tools that every developer could leverage to ease the integration with Kubernetes/OpenShift.</p>
</div>
<div class="paragraph">
<p>Some of the bits fabric8 provides are:</p>
</div>
<div class="ulist">
<ul>
<li>
<p><a href="https://github.com/fabric8io/kubernetes-client">OpenShift/Kubernetes Client</a></p>
</li>
<li>
<p><a href="https://github.com/fabric8io/spring-cloud-kubernetes">Spring Cloud Kubernetes</a></p>
</li>
<li>
<p><a href="https://github.com/fabric8io/fabric8/tree/master/components/fabric8-karaf">Fabric8 Karaf</a></p>
</li>
<li>
<p><a href="https://maven.fabric8.io">Fabric8 Maven Plugin</a></p>
</li>
</ul>
</div>
<div class="paragraph">
<p>As we are brave, we won&#8217;t talk about doing Microservices with Spring Boot but we&#8217;ll go with <a href="http://karaf.apache.org/">Apache Karaf</a> and <a href="http://camel.apache.org/">Apache Camel</a>.</p>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
I&#8217;ll show the relevant parts here, full code is available on <a href="https://github.com/lburgazzoli/camel-karaf-microservice">github</a>
</td>
</tr>
</table>
</div>
</div>
</div>
<div class="sect2">
<h3 id="_set_up">Set-up</h3>
<div class="paragraph">
<p>In a traditional environment you often deploy bundles on a running Karaf container but that&#8217;s not the way we want to deploy in a microservice environment. Instead we want standalone applications so the first step is to create custom Karaf distribution pre-configured with the needed bundles.</p>
</div>
<div class="paragraph">
<p>This can be done via karaf-maven-plugin:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;plugin&gt;
    &lt;groupId&gt;org.apache.karaf.tooling&lt;/groupId&gt;
    &lt;artifactId&gt;karaf-maven-plugin&lt;/artifactId&gt;
    &lt;version&gt;${karaf.version}&lt;/version&gt;
    &lt;extensions&gt;true&lt;/extensions&gt;
    &lt;executions&gt; <i class="conum" data-value="1"></i><b>(1)</b>
      &lt;execution&gt;
        &lt;id&gt;karaf-assembly&lt;/id&gt;
        &lt;goals&gt;
          &lt;goal&gt;assembly&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;phase&gt;install&lt;/phase&gt;
      &lt;/execution&gt;
      &lt;execution&gt;
        &lt;id&gt;karaf-archive&lt;/id&gt;
        &lt;goals&gt;
          &lt;goal&gt;archive&lt;/goal&gt;
        &lt;/goals&gt;
        &lt;phase&gt;install&lt;/phase&gt;
      &lt;/execution&gt;
    &lt;/executions&gt;
    &lt;configuration&gt;
      &lt;javase&gt;1.8&lt;/javase&gt;
      &lt;archiveTarGz&gt;true&lt;/archiveTarGz&gt;
      &lt;startupFeatures&gt; <i class="conum" data-value="2"></i><b>(2)</b>
        &lt;!-- karaf --&gt;
        &lt;feature&gt;framework&lt;/feature&gt;
        &lt;feature&gt;scr&lt;/feature&gt;
        &lt;feature&gt;aries-blueprint&lt;/feature&gt;

        &lt;!-- fabric8 --&gt;
        &lt;feature&gt;fabric8-karaf-blueprint&lt;/feature&gt;
        &lt;feature&gt;fabric8-karaf-cm&lt;/feature&gt;

        &lt;!-- camel --&gt;
        &lt;feature&gt;camel-core&lt;/feature&gt;
        &lt;feature&gt;camel-blueprint&lt;/feature&gt;
      &lt;/startupFeatures&gt;
      &lt;startupBundles&gt; <i class="conum" data-value="3"></i><b>(3)</b>
        &lt;bundle&gt;mvn:${project.groupId}/${project.artifactId}/${project.version};start-level=80&lt;/bundle&gt;
      &lt;/startupBundles&gt;
    &lt;/configuration&gt;
    ...
&lt;/plugin&gt;</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Map karaf-maven-plugin&#8217;s karaf-assembly and archive phases to install phase, this is mandatory if you want your project to be included in the distribution.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>List of features to start at boot</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>List of bundles to start at boot</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>We are now ready to start writing our microservice so let&#8217;s have a look on how to leverage Fabric8 Karaf:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>With <strong>fabric8-karaf-blueprint</strong> installed you can access ConfigMap and Secrets using property placeholders so if you have a ConfigMap like the one below</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-yaml" data-lang="yaml">kind: ConfigMap
apiVersion: v1
metadata:
  name: camel-karaf-global
data:
  data.center.name: "dc1"</code></pre>
</div>
</div>
<div class="paragraph">
<p>you can use the notation <code>k8s:map:mapName/dataKey</code> to retrieve the vaue of the field data.center.name, i.e:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;bean id="myBean" class="com.github.lburgazzoli.microservice.MyBean"&gt;
  &lt;argument value="$[k8s:map:camel-karaf-global/data.center.name]"/&gt;
  ...
&lt;/bean&gt;</code></pre>
</div>
</div>
</li>
<li>
<p>With <strong>fabric8-karaf-cm</strong> installed you can feed ConfigAdmin with values from ConfigMaps so if you have a ConfigMap as below</p>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-yaml" data-lang="yaml">kind: ConfigMap
apiVersion: v1
metadata:
  name: camel-karaf-microservice
  labels:
    karaf.pid: camel.karaf.microservice
data:
  bean.body: "Hello from OpenShift"</code></pre>
</div>
</div>
<div class="paragraph">
<p>then the service with pid camel.karaf.microservice will be able to retrieve the value of the property bean.body as if the value would have been provided in <code>etc/camel.karaf.microservice.cfg</code>:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;bean id="myBean" class="com.github.lburgazzoli.microservice.MyBean"&gt;
  ..
  &lt;argument value="${bean.body}"/&gt;
&lt;/bean&gt;</code></pre>
</div>
</div>
</li>
<li>
<p>With fabric8-karaf-cm installed you can "hot reconfigure" your application by updating a ConfigMap</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>So let&#8217;s put all togheter to implement a simple Camel route using OSGI Blueprint:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code class="language-xml" data-lang="xml">&lt;?xml version="1.0"?&gt;
&lt;blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
  xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.3.0"
  xsi:schemaLocation="
    http://www.osgi.org/xmlns/blueprint/v1.0.0
    https://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
    http://camel.apache.org/schema/blueprint
    http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
    http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.3.0
    http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.3.xsd"&gt;

  &lt;cm:property-placeholder
      persistent-id="camel.karaf.microservice" <i class="conum" data-value="1"></i><b>(1)</b>
      update-strategy="reload"&gt; <i class="conum" data-value="2"></i><b>(2)</b>
    &lt;cm:default-properties&gt;
    &lt;/cm:default-properties&gt;
  &lt;/cm:property-placeholder&gt;

  &lt;ext:property-placeholder
    evaluator="fabric8" <i class="conum" data-value="3"></i><b>(3)</b>
    placeholder-prefix="$[" placeholder-suffix="]"/&gt;

  &lt;bean id="myBean" class="com.github.lburgazzoli.microservice.MyBean"&gt;
    &lt;argument value="$[k8s:map:camel-karaf-global/data.center.name]"/&gt;
    &lt;argument value="${bean.body}"/&gt;
  &lt;/bean&gt;

  &lt;camelContext id="camel-context" xmlns="http://camel.apache.org/schema/blueprint"&gt;

    &lt;route id="timer"&gt;
      &lt;from uri="timer:foo?period=10s"/&gt;
      &lt;setHeader headerName="DataCenter"&gt;
          &lt;method ref="myBean" method="dataCenter"/&gt;
      &lt;/setHeader&gt;
      &lt;setBody&gt;
          &lt;method ref="myBean" method="body"/&gt;
      &lt;/setBody&gt;
      &lt;log message="Body is: ${body}, DataCenter is: ${header.DataCenter}"/&gt;
    &lt;/route&gt;

  &lt;/camelContext&gt;

&lt;/blueprint&gt;</code></pre>
</div>
</div>
<div class="colist arabic">
<table>
<tr>
<td><i class="conum" data-value="1"></i><b>1</b></td>
<td>Set the persistent-id for the Blueprint.</td>
</tr>
<tr>
<td><i class="conum" data-value="2"></i><b>2</b></td>
<td>Configure reload strategy of the context so if a property changes in ConfigAdmin (i.e. by changing the related ConfigMap) the context will be reloaded.</td>
</tr>
<tr>
<td><i class="conum" data-value="3"></i><b>3</b></td>
<td>Configure fabric8 PropertyEvaluator so that you can use Fabric8&#8217;s functions to resolve placeholders.</td>
</tr>
</table>
</div>
<div class="admonitionblock note">
<table>
<tr>
<td class="icon">
<i class="fa icon-note" title="Note"></i>
</td>
<td class="content">
Check the <a href="http://fabric8.io/guide/karaf.html">Fabric8 Karaf documentation</a> for details and options.
</td>
</tr>
</table>
</div>
</div>
<div class="sect2">
<h3 id="_running_the_example">Running the example</h3>
<div class="paragraph">
<p>You need a running OpenShift or Kubenretes cluster to run the example, if you do not have one I suggest to use <a href="https://github.com/kubernetes/minikube">Minikube</a> or <a href="https://github.com/jimmidyson/minishift">Minishift</a> to set up an environment in a few simple steps even <a href="http://www.davsclaus.com/2016/10/installing-kubernetes-from-copenhagen.html">while having a drink at the Airport</a></p>
</div>
<div class="admonitionblock important">
<table>
<tr>
<td class="icon">
<i class="fa icon-important" title="Important"></i>
</td>
<td class="content">
If you deploy on OpenShift you need to grant view role to the service account <code>oc policy add-role-to-user view system:serviceaccount:$(oc project -q):default -n $(oc project -q)</code>
</td>
</tr>
</table>
</div>
<div class="paragraph">
<p>To run the application run the following command:</p>
</div>
<div class="listingblock">
<div class="content">
<pre class="highlight"><code>./mvnw clean fabric8:run</code></pre>
</div>
</div>
<div class="paragraph">
<p>This command will build the application, generate OpenShift/Kubernetes resources then deploy and run the application to the cluster and finally tail the pod log so you can see what the application is doing.</p>
</div>
<div class="paragraph">
<p>After the initialization the log should looks like:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>[INFO] F8: 2016-10-24 15:48:14,717 | INFO  | FelixStartLevel  | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) started in 0.284 seconds
[INFO] F8: 2016-10-24 15:48:15,728 | INFO  | #0 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from OpenShift, DataCenter is: dc1
[INFO] F8: 2016-10-24 15:48:25,736 | INFO  | #0 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from OpenShift, DataCenter is: dc1
[INFO] F8: 2016-10-24 15:48:35,718 | INFO  | #0 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from OpenShift, DataCenter is: dc1</pre>
</div>
</div>
<div class="paragraph">
<p>Now if we update the ConfigMap named <code>camel-karaf-microservice</code> with a message like <code>Hello from Minishift</code> we should see the context to be restarted and the new message being displayed like below:</p>
</div>
<div class="literalblock">
<div class="content">
<pre>[INFO] F8: 2016-10-24 15:50:01,214 | INFO  | Thread-9         | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) is shutting down
[INFO] F8: 2016-10-24 15:50:01,216 | INFO  | Thread-9         | DefaultShutdownStrategy          | 36 - org.apache.camel.camel-core - 2.18.0 | Starting to graceful shutdown 1 routes (timeout 300 seconds)
[INFO] F8: 2016-10-24 15:50:01,220 | INFO  | 1 - ShutdownTask | DefaultShutdownStrategy          | 36 - org.apache.camel.camel-core - 2.18.0 | Route: timer shutdown complete, was consuming from: timer://foo?period=10s
[INFO] F8: 2016-10-24 15:50:01,221 | INFO  | Thread-9         | DefaultShutdownStrategy          | 36 - org.apache.camel.camel-core - 2.18.0 | Graceful shutdown of 1 routes completed in 0 seconds
[INFO] F8: 2016-10-24 15:50:01,249 | INFO  | Thread-9         | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) uptime 1 minute
[INFO] F8: 2016-10-24 15:50:01,250 | INFO  | Thread-9         | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) is shutdown in 0.035 seconds
[INFO] F8: 2016-10-24 15:50:01,330 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) is starting
[INFO] F8: 2016-10-24 15:50:01,330 | INFO  | rint Extender: 1 | ManagedManagementStrategy        | 36 - org.apache.camel.camel-core - 2.18.0 | JMX is enabled
[INFO] F8: 2016-10-24 15:50:01,364 | INFO  | rint Extender: 1 | DefaultRuntimeEndpointRegistry   | 36 - org.apache.camel.camel-core - 2.18.0 | Runtime endpoint registry is in extended mode gathering usage statistics of all incoming and outgoing endpoints (cache limit: 1000)
[INFO] F8: 2016-10-24 15:50:01,396 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | StreamCaching is not in use. If using streams then its recommended to enable stream caching. See more details at http://camel.apache.org/stream-caching.html
[INFO] F8: 2016-10-24 15:50:01,417 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Route: timer started and consuming from: timer://foo?period=10s
[INFO] F8: 2016-10-24 15:50:01,418 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Total 1 routes, of which 1 are started.
[INFO] F8: 2016-10-24 15:50:01,418 | INFO  | rint Extender: 1 | BlueprintCamelContext            | 36 - org.apache.camel.camel-core - 2.18.0 | Apache Camel 2.18.0 (CamelContext: camel-context) started in 0.087 seconds
[INFO] F8: 2016-10-24 15:50:02,419 | INFO  | #2 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from Minishift, DataCenter is: dc1
[INFO] F8: 2016-10-24 15:50:12,418 | INFO  | #2 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from Minishift, DataCenter is: dc1
[INFO] F8: 2016-10-24 15:50:22,419 | INFO  | #2 - timer://foo | timer                            | 36 - org.apache.camel.camel-core - 2.18.0 | Body is: Hello from Minishift, DataCenter is: dc1</pre>
</div>
</div>
</div>]]></description><link>https://lburgazzoli.github.io/2016/10/24/def-svc-Fabric8applykarafand-Thencamel.html</link><guid isPermaLink="true">https://lburgazzoli.github.io/2016/10/24/def-svc-Fabric8applykarafand-Thencamel.html</guid><category><![CDATA[microservices]]></category><category><![CDATA[ fabric8]]></category><category><![CDATA[ karaf]]></category><category><![CDATA[ openshift]]></category><category><![CDATA[ kubernetes]]></category><dc:creator><![CDATA[Luca Burgazzoli]]></dc:creator><pubDate>Mon, 24 Oct 2016 00:00:00 GMT</pubDate></item></channel></rss>